Aclaración: A excepción del endpoint para obtener todos los productos.
todas las demas peticiones deben ir acompañadas de un Authorization en el header con el token.
'Authorization': 'Bearer ${token}',

----------------------------------------------------------------- SESIONES
[name, last_name, email, role, password, repeatedPassword] = String

Endpoints de sesión:
-Crear mail de registro: 'https://natural-icy-market-api.onrender.com/api/sessions/register'
Metodo: 'POST',
Campos a proveer en fetch: { name, last_name, email, role, password, repeatedPassword },

-Validar y terminar registro: 'https://natural-icy-market-api.onrender.com/api/sessions/confirmAccount'
Metodo: 'POST',
Campos a proveer en fetch: { token, userToken },
Tener en cuenta: token y userToken los obtenemos de url params. token = ht y userToken = ut

-Login: 'https://natural-icy-market-api.onrender.com/api/sessions/login',
Metodo: 'POST'
Campos a proveer en fetch: { email, password },

-Logout: 'https://natural-icy-market-api.onrender.com/api/sessions/logout',
Metodo: 'GET',

-Cambiar contraseña: 
Enviar recuperación: 'https://natural-icy-market-api.onrender.com/api/sessions/forgotPass'
Metodo: 'POST'
Campos a proveer en fetch: { email },
Tener en cuenta: En este punto se envía un mail de recuperación

Aclaración: La URL de recuperación tiene dos params, "token" y "email", hay que
obtenerlas desde el front y enviarlas en el body del fetch del siguiente paso

Cambiar la contraseña: 'https://natural-icy-market-api.onrender.com/api/sessions/changePassword'
Metodo: 'POST',
Campos a proveer en fetch: { password, repeatedPassword, token, email }
Tener en cuenta: Una vez modificada, redireccionar a donde aviso de modificación

----------------------------------------------------------------- PRODUCTO

[title, description, category] = String
[code] = Alfanumérico (string)
[labels, thumbnail] = Array de Strings
[price, stock] = Number
[newParamValue] = Lo que se requiera, se valida en back

Endpoint para producto:
-Subir producto: 'https://natural-icy-market-api.onrender.com/api/products',
Metodo: 'POST',
Campos a proveer en fetch: { title, description, labels, code, price, thumbnail, stock, category },
Tener en cuenta: Los "code" no se pueden repetir, sino no se sube el producto.
"labels" y "thumbnail" deben ser arrays. Imagenes menores a 5MB

[title, description, code, price, thumbnail, stock, category] = Propiedades que se pueden editar
-Editar producto: `https://natural-icy-market-api.onrender.com/api/products/${IdProducto}`,
Metodo: 'PUT',
Campos a proveer en fetch: { newParamValue },
Tener en cuenta: TODA la información se modifica menos el "code",
Imagenes menores a 5MB y un máximo de 5 imagenes

-Agregar imagen de producto: `https://natural-icy-market-api.onrender.com/api/products/:productId/images`,
Metodo: 'PUT'
Campos a proveer en fetch: { thumbnail },
Tener en cuenta: Imagenes menores a 5MB

-Eliminar imagen de producto: `https://natural-icy-market-api.onrender.com/api/products/:productId/images?imageId=${NombreImg}`,
Metodo: 'DELETE'

-Eliminar producto: `https://natural-icy-market-api.onrender.com/api/products/${IdProducto}`,
Metodo: 'DELETE',

-Mostrar productos con stock: 'https://natural-icy-market-api.onrender.com/api/products/withStock',
Metodo: 'GET',
Tener en cuenta: Se utilizan las imagenes mediante referencia http "https://natural-icy-market-api.onrender.com/${img}"

-Mostrar productos con stock: 'https://natural-icy-market-api.onrender.com/api/products/withoutStock',
Metodo: 'GET',
Tener en cuenta: Se utilizan las imagenes mediante referencia http "https://natural-icy-market-api.onrender.com/${img}"

----------------------------------------------------------------- FAVORITOS

[productIds] = Array de ID's (Strings) -- [{id:'659857ac68d4f2ebb581d6e6'}]

Endpoint para favoritos:

-Mostrar favoritos: 'https://natural-icy-market-api.onrender.com/api/products/selected',
Metodo: 'POST',
Campos a proveer en fetch: { productIds },
Tener en cuenta: Se utilizan las imagenes mediante referencia http "https://natural-icy-market-api.onrender.com/${img}"

----------------------------------------------------------------- CARRITO

[productIds] = Array de ID's y quantity (Strings) -- [{id:'659857ac68d4f2ebb581d6e6', quantity:1}]

Endpoint para carrito:

-Mostrar carrito: 'https://natural-icy-market-api.onrender.com/api/products/selected',
Metodo: 'POST',
Campos a proveer en fetch: { productIds },
Tener en cuenta: Se utilizan las imagenes mediante referencia http "https://natural-icy-market-api.onrender.com/${img}"
 
-----------------------------------------------------------------CHECKOUT

[orderData] = Array de ID's y quantity (Strings) -- [{id:'659857ac68d4f2ebb581d6e6', quantity:1}, {id:'659857c868d4f2ebb581d6ea', quantity:3}, {id:'65985819bc7e6b723972114f', quantity:5}]
[address] = Objeto con los sig. params -- { street_name: 'Calle falsa', street_number: 7732, apartment: '7C', aditional_info: 'Es por ahí, buscá', zip_code: '5885' } o sino false
[phone] = Objeto con los sig. params -- const phone = { area_code: 3544, number: 300779 }

-Crear preference button: 'https://natural-icy-market-api.onrender.com/api/checkout/createPreference'
Metodo: 'POST',
Campos a proveer en fetch: {orderData, address, phone}
Tener en cuenta: SI hay envío todos la información es necesaria menos apartment y aditional_info, si no hay envío no hace falta address.
SI se proporciona address entonces se supone que hay envío, si no se proporciona no se agrega el estado de envío

-Eliminar ticket y reintegro de stock: